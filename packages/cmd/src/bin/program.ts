import { Command } from "@commander-js/extra-typings";
import chalk from "chalk";
import { reporterVersion } from "../env/versions";
import { dim } from "../logger";
import { apiHandler, getLastRunHandler, uploadHandler } from "./handlers";
import {
  apiKeyOption,
  branchOption,
  ciBuildIdOption,
  debugOption,
  disableTitleTagsOption,
  machineIdOption,
  projectOption,
  recordKeyOption,
  removeTagOption,
  reportDirOption,
  tagOption,
} from "./options";

const NAME = "currents";
export const getProgram = () =>
  new Command(NAME)
    .version(reporterVersion)
    .addCommand(getCurrentsUploadCommand(), { isDefault: true })
    .addCommand(getCurrentsAPICommand());

const currentsReporterExample = `
----------------------------------------------------
ðŸ“– Documentation: https://docs.currents.dev
ðŸ¤™ Support:       support@currents.dev
----------------------------------------------------

${chalk.bold("Examples")}

Upload test results to Currents:
${dim(`${NAME} upload --key <record-key> --project-id <id> --ci-build-id <build-id>`)}

Upload test results to Currents, add tags "tagA", "tagB" to the recorded run:
${dim(
  `${NAME} upload --key <record-key> --project-id <id> --ci-build-id <build-id> --tag tagA --tag tagB`
)}

Provide a custom path to the reports directory:
${dim(
  `${NAME} upload --key <record-key> --project-id <id> --ci-build-id <build-id> --report-dir <report-dir>`
)}
`;

export const getCurrentsUploadCommand = () => {
  const command = new Command()
    .name("upload")
    .command("upload")
    .showHelpAfterError("(add --help for additional information)")
    .allowUnknownOption()
    .description(
      `Upload test results generated by Currents reporters to https://currents.dev
${currentsReporterExample}`
    )
    .addOption(ciBuildIdOption)
    .addOption(recordKeyOption)
    .addOption(projectOption)
    .addOption(tagOption)
    .addOption(removeTagOption)
    .addOption(disableTitleTagsOption)
    .addOption(machineIdOption)
    .addOption(debugOption)
    .addOption(reportDirOption)
    .action((options) => uploadHandler(options));

  return command;
};

const currentsAPIExample = `
----------------------------------------------------
ðŸ“– Documentation: https://docs.currents.dev
ðŸ¤™ Support:       support@currents.dev
----------------------------------------------------

${chalk.bold("Examples")}

Obtain last run data by --ci-build-id:
${dim(`${NAME} api get-last-run --api-key <api-key> --ci-build-id --provider <provider>`)}

Obtain last run data using filters:
${dim(`${NAME} api get-last-run --api-key <api-key> --project-id <project-id> --branch <branch> --tag tagA --tag tagB`)}
`;

export const getLastRunCommand = () => {
  const command = new Command()
    .name("get-last-run")
    .allowUnknownOption()
    .addOption(ciBuildIdOption)
    .addOption(projectOption)
    .addOption(branchOption)
    .addOption(tagOption)
    .addOption(debugOption)
    .action(getLastRunHandler);

  return command;
};

export const getCurrentsAPICommand = () => {
  const command = new Command()
    .command("api")
    .description(`Receive information from Currents API ${currentsAPIExample}`)
    .showHelpAfterError("(add --help for additional information)")
    .allowUnknownOption()
    .addCommand(getLastRunCommand())
    .addOption(apiKeyOption)
    .addOption(debugOption)
    .action(apiHandler);

  return command;
};
